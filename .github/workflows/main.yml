name: Deploy to Remote Server

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: '请选择构建分支'
        required: true
        type: choice
        options:
          - dev
          - master
        default: dev  # 设置默认的分支名
      app_env:
        description: '请选择要构建到的项目环境'
        required: true
        type: choice
        options:
          - test
          - prod
        default: test
      # proxy 和 build-info 无论如何都会构建，所以这里不需要加
      build_www:
        description: '构建：www'
        type: boolean
        default: true
      build_api_gateway:
        description: '构建：api-gateway'
        type: boolean
        default: true
      build_template_pc:
        description: '构建：template-pc'
        type: boolean
        default: true
      build_template_mobile:
        description: '构建：template-mobile'
        type: boolean
        default: true
      build_template_api:
        description: '构建：template-api'
        type: boolean
        default: true
      build_template_mysql:
        description: '构建：template-mysql'
        type: boolean
        default: true
      use_cache:
        description: '是否使用镜像缓存构建'
        type: boolean
        default: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands to develop
      uses: appleboy/ssh-action@master
      with:
        host: ${{ github.event.inputs.app_env == 'test' && secrets.HOST || secrets.HOST }} # if-else
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        command_timeout: "60m"
        script: |
          cd /
          chmod +x /usr/local/wujiaying/repos/egeek/build-git-pull.sh
          /usr/local/wujiaying/repos/egeek/build-git-pull.sh -branch_name ${{ github.event.inputs.branch_name }}
          # chmod +x /usr/local/wujiaying/repos/egeek/linux/shells/load-docker-images.sh
          # /usr/local/wujiaying/repos/egeek/linux/shells/load-docker-images.sh
          chmod +x /usr/local/wujiaying/repos/egeek/build.sh
          
          NO_CACHE_STRING=""
          if [ "${{ github.event.inputs.use_cache }}" = "false" ]; then
            NO_CACHE_STRING="--no-cache"
          fi
          
          declare -A project_map
          declare -A project_skip_building_map
          declare -a order_project_array
          add_project() {
              local key=$1
              local value=$2
              local skip_building=${3:-"false"}
              # 如果键不存在，则添加到顺序数组中
              if [[ -z ${project_map[$key]+_} ]]; then
                  order_project_array+=("$key")
              fi
              # 更新关联数组中的值
              project_map[$key]=$value
              project_skip_building_map[$key]=$skip_building
          }
          
          # 以下为具体构建的项目
          add_project "www" "${{ github.event.inputs.build_www }}"
          add_project "api-gateway" "${{ github.event.inputs.build_api_gateway }}"
          add_project "template-pc" "${{ github.event.inputs.build_template_pc }}"
          add_project "template-mobile" "${{ github.event.inputs.build_template_mobile }}"
          add_project "template-api" "${{ github.event.inputs.build_template_api }}"
          add_project "template-mysql" "${{ github.event.inputs.build_template_mysql }}" "true"
          add_project "proxy" "true"   # 固定构建
          
          projects=""
          projects_skip_building=""
          for key in "${order_project_array[@]}"; do
            if [ "${project_map[$key]}" = "true" ]; then
                # 如果是第一个元素不加逗号，否则在前面加上逗号
                if [ -z "$projects" ]; then
                    projects+="$key"
                else
                    projects+=",${key}"
                fi

                if [ "${project_skip_building_map[$key]}" = "true" ]; then
                  if [ -z "$projects_skip_building" ]; then
                    projects_skip_building+="$key"
                  else
                    projects_skip_building+=",${key}"
                  fi
                fi
            fi
          done

          APP_TEMPLATE_MYSQL_ROOT_PASSWORD=${{ github.event.inputs.app_env == 'test' && secrets.TEST_TEMPLATE_MYSQL_ROOT_PASSWORD || secrets.secrets.TEST_TEMPLATE_MYSQL_ROOT_PASSWORD }} \
          APP_TEMPLATE_MYSQL_PASSWORD=${{ github.event.inputs.app_env == 'test' && secrets.TEST_TEMPLATE_MYSQL_PASSWORD || secrets.secrets.TEST_TEMPLATE_MYSQL_PASSWORD }} \
          /usr/local/wujiaying/repos/egeek/build.sh \
          -env ${{ github.event.inputs.app_env }} \
          -projects $projects \
          -projects-skip-building $projects_skip_building \
          $NO_CACHE_STRING
